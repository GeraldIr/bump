#!/usr/bin/python3

import argparse
import json
import os
import re
import subprocess
from typing import Union


CONFIG_FILE = "bump.cfg"


def init_config(args):
    """Initialize a bump.cfg file."""
    if os.path.exists(CONFIG_FILE):
        print("Configuration already exists.")
        return
    with open(CONFIG_FILE, "w") as f:
        json.dump({}, f)
    if args.v:
        ...


def parse_config(except_flags=None, only_flags=None):
    """Parse bump.cfg, handling entries and applying -e/-o filters."""

    except_flags = set(except_flags) if except_flags else set()
    only_flags = set(only_flags) if only_flags else set()

    with open(CONFIG_FILE, mode="r") as f:
        config: dict = json.load(f)

    # Apply filters
    filtered_config = {}
    for key, entry in config.items():
        flags = entry["flags"] if (entry and "flags" in entry) else None
        if flags:
            if except_flags and any([flag in except_flags for flag in flags]):
                continue
            if only_flags and not any([flag in only_flags for flag in flags]):
                continue
        elif only_flags:
            continue  # Skip if only_flags specified but no flag on this entry
        # Decrement line and column entries here, so they don't have to be adjusted when working with indices.
        if entry["type"] == "lc":
            entry["column"] = entry["column"] - 1
            entry["line"] = entry["line"] - 1
        filtered_config[key] = entry

    return filtered_config


def _parse_index_or_slice(s):
    if ":" in s:  # It's a slice
        parts = s.split(":")
        parts = [int(p) if p else None for p in parts]  # Convert to int or None
        return slice(*parts)
    else:  # It's a single index
        return int(s)


def _filter_occurences(occurences, filter):
    filter = filter if filter else ":"
    if isinstance(filter, str):
        filtered_occurences = occurences[_parse_index_or_slice(filter)]
    elif isinstance(filter, list):
        filtered_occurences = [o for i, o in enumerate(occurences) if i in occurences]
    return filtered_occurences


def _set_tag_value(
    filepath: str = "",
    tag: str = "",
    occurences_slice: Union[str, list[int]] = ":",
    wrapper: str = None,
    value: str = "",
):
    found_occurences = []
    with open(filepath, "r") as f:
        lines = f.read().splitlines()

    for i, line in enumerate(lines):
        if line.startswith(tag):
            found_occurences.append(i)

    filtered_occurences = _filter_occurences(
        occurences=found_occurences, filter=occurences_slice
    )
    for occurence_index in filtered_occurences:
        lines[occurence_index] = (
            f"{tag}{wrapper if wrapper is not None else ''}{value}{wrapper if wrapper is not None else ''}"
        )

    with open(filepath, "w") as f:
        lines = [line + "\n" for line in lines]
        f.writelines(lines)


def _get_tag_value(
    filepath: str = "",
    tag: str = "",
    occurences_slice: Union[str, list[int]] = ":",
    wrapper: str = None,
    verbosity: int = 0,
):
    if verbosity >= 2:
        print(
            f"\
              Path: {filepath}\n\
              Tag: {tag} \n\
              Occurences: {occurences_slice if occurences_slice != ':' else 'All'}\n\
              Wrapper: {wrapper if wrapper else 'None'}\
            "
        )

    found_occurences = []
    with open(filepath, "r") as f:
        lines = f.read().splitlines()

    for i, line in enumerate(lines):
        if line.startswith(tag):
            found_occurences.append(i)

    filtered_occurences = _filter_occurences(
        occurences=found_occurences, filter=occurences_slice
    )

    for occurence_index in filtered_occurences:
        if verbosity >= 1:
            print(lines[occurence_index])
            continue

        print(lines[occurence_index].lstrip(tag))


def _set_lc_value(
    filepath: str = "",
    line: str = "",
    column: int = 0,
    wrapper: str = "",
    value: str = "",
):
    with open(filepath, "r") as f:
        lines = f.read().splitlines()

    lines[line] = (
        f"{lines[line][:column]}{wrapper if wrapper is not None else ''}{value}{wrapper if wrapper is not None else ''}"
    )

    with open(filepath, "w") as f:
        lines = [line + "\n" for line in lines]
        f.writelines(lines)


def _get_lc_value(
    filepath: str = "",
    line: str = "",
    column: int = 0,
    wrapper: str = "",
    verbosity: int = 0,
):
    if verbosity >= 2:
        print(
            f"\
              File: {filepath}\n\
              Regex: {line} \n\
              Column: {column}\n\
              Wrapper: {wrapper if wrapper else 'None'}\
            "
        )

    with open(filepath, "r") as f:
        lines = f.read().splitlines()

    print(lines[line][column:])


def _set_regex_value(
    filepath: str = "",
    regex: str = "",
    group: int = 0,
    occurences_slice: Union[str, list[int]] = ":",
    wrapper: str = "",
    value: str = "",
):
    with open(filepath, "r") as f:
        lines = f.read().splitlines()

    found_occurences = []

    for i, line in enumerate(lines):
        m = re.search(regex, line)
        if m:
            found_occurences.append((i, m))

    filtered_occurences = _filter_occurences(
        occurences=found_occurences, filter=occurences_slice
    )

    for occurence_index, occurence_match in filtered_occurences:
        if not group:
            lines[occurence_index] = (
                f"{occurence_match.string}{wrapper if wrapper is not None else ''}{value}{wrapper if wrapper is not None else ''}"
            )
        else:
            start = lines[occurence_index][0 : occurence_match.start(group)]
            end = lines[occurence_index][occurence_match.end(group) :]
            lines[occurence_index] = (
                f"{start}{wrapper if wrapper is not None else ''}{value}{wrapper if wrapper is not None else ''}{end}"
            )
    with open(filepath, "w") as f:
        lines = [line + "\n" for line in lines]
        f.writelines(lines)


def _get_regex_value(
    filepath: str = "",
    regex: str = "",
    group: int = 0,
    occurences_slice: Union[str, list[int]] = ":",
    wrapper: str = "",
    verbosity: int = 0,
):
    if verbosity >= 2:
        print(
            f"\
              File: {filepath}\n\
              Regex: {regex} \n\
              Group: {group if group else 'None'}\n\
              Occurences: {occurences_slice if occurences_slice != ':' else 'All'}\n\
              Wrapper: {wrapper if wrapper else 'None'}\
            "
        )

    with open(filepath, "r") as f:
        lines = f.read().splitlines()

    found_occurences = []

    for i, line in enumerate(lines):
        m = re.search(regex, line)
        if m:
            found_occurences.append((i, m))

    filtered_occurences = _filter_occurences(
        occurences=found_occurences, filter=occurences_slice
    )

    for occurence_index, occurence_match in filtered_occurences:
        if verbosity >= 1:
            print(line[occurence_index])
            continue
        if not group:
            print(occurence_match.string)
        else:
            print(occurence_match.group(group))


def set_value(args):
    """Set the value associated with a tag in files listed in bump.cfg."""
    config = parse_config(args.e, args.o)
    for entry in config.values():
        type, filepath, wrapper = (
            entry["type"],
            entry["filepath"],
            entry["wrapper"],
        )

        if not os.path.exists(filepath):
            print(f"File not found: {filepath}")
            continue

        if type == "tag":
            tag = entry["tag"]
            occurences = entry["occurences"]
            _set_tag_value(
                filepath=filepath,
                tag=tag,
                occurences_slice=occurences,
                wrapper=wrapper,
                value=args.value,
            )
        elif type == "lc":
            line = entry["line"]
            column = entry["column"]
            _set_lc_value(
                filepath=filepath,
                line=line,
                column=column,
                wrapper=wrapper,
                value=args.value,
            )
        elif type == "regex":
            regex = entry["regex"]
            group = entry["group"]
            occurences = entry["occurences"]
            _set_regex_value(
                filepath=filepath,
                regex=regex,
                group=group,
                occurences_slice=occurences,
                wrapper=wrapper,
                value=args.value,
            )


def get_value(args):
    """Get the value associated with a tag in files listed in bump.cfg."""
    config = parse_config(args.e, args.o)
    for entry in config.values():
        type, filepath, wrapper = (
            entry["type"],
            entry["filepath"],
            entry["wrapper"],
        )

        if not os.path.exists(filepath):
            print(f"File not found: {filepath}")
            continue

        if type == "tag":
            tag = entry["tag"]
            occurences = entry["occurences"]
            _get_tag_value(
                filepath=filepath,
                tag=tag,
                occurences_slice=occurences,
                wrapper=wrapper,
            )
        elif type == "lc":
            line = entry["line"]
            column = entry["column"]
            _get_lc_value(
                filepath=filepath,
                line=line,
                column=column,
                wrapper=wrapper,
            )
        elif type == "regex":
            regex = entry["regex"]
            group = entry["group"]
            occurences = entry["occurences"]
            _get_regex_value(
                filepath=filepath,
                regex=regex,
                group=group,
                occurences_slice=occurences,
                wrapper=wrapper,
            )


def add_entry(args):
    """Add a new entry to bump.cfg."""

    config = parse_config()

    config[args.name] = {
        "type": args.subcommand,
        "filepath": args.filepath,
        "flags": args.flags,
        "wrapper": args.wrapper,
    }

    if args.subcommand == "tag":
        config[args.name] |= {
            "tag": args.tag,
            "occurences": args.occurences,
        }
    elif args.subcommand == "lc":
        config[args.name] |= {
            "line": int(args.line),
            "column": int(args.column),
        }
    elif args.subcommand == "regex":
        config[args.name] |= {
            "regex": args.regex,
            "group": int(args.group[0]) if args.group else None,
            "occurences": args.occurences,
        }

    with open(CONFIG_FILE, mode="w") as f:
        json.dump(config, f, indent=4)


def remove_entry(args):
    """Remove an entry from bump.cfg based on the tag."""
    config = parse_config()

    config.pop(args.name)

    with open(CONFIG_FILE, mode="w") as f:
        json.dump(config, f, indent=4)


def edit_config():
    editor = os.environ.get("EDITOR", "nano")
    subprocess.run([editor, "bump.cfg"])


def main():
    parser = argparse.ArgumentParser(
        prog="bump", description="A CLI tool to manage values in multiple files."
    )

    parser.add_argument(
        "-v",
        "--verbose",
        dest="verbosity",
        help="Enable verbose output",
        action="count",
        default=0,
        required=False,
    )

    subparsers = parser.add_subparsers(dest="command", required=True)

    subparsers.add_parser("init", help="Initialize bump.cfg").set_defaults(
        func=init_config
    )

    subparsers.add_parser("edit", help="Opens the bump.cfg in the standard editor.")

    get_parser = subparsers.add_parser(
        "get", help="Get a value from files listed in bump.cfg"
    )
    get_parser.set_defaults(func=get_value)
    get_parser.add_argument(
        "--except", "-e", dest="e", nargs="+", help="Exclude entries with these flags"
    )
    get_parser.add_argument(
        "--only",
        "-o",
        dest="o",
        nargs="+",
        help="Include only entries with these flags",
    )

    set_parser = subparsers.add_parser(
        "set", help="Set a value in files listed in the bump config."
    )
    set_parser.set_defaults(func=set_value)
    set_parser.add_argument("value", help="Value to set")
    set_parser.add_argument(
        "--except", "-e", dest="e", nargs="*", help="Exclude entries with these flags"
    )
    set_parser.add_argument(
        "--only",
        "-o",
        dest="o",
        nargs="*",
        help="Include only entries with these flags",
    )

    add_parser = subparsers.add_parser("add", help="Add a new entry to bump config")
    add_sub_parser = add_parser.add_subparsers(dest="subcommand")
    add_tag_parser = add_sub_parser.add_parser(
        "tag", help="Add a tag-type entry to the bump config."
    )
    add_tag_parser.set_defaults(func=add_entry)
    add_tag_parser.add_argument("name", help="The name of the entry in the config.")
    add_tag_parser.add_argument("filepath", help="Path to the file")
    add_tag_parser.add_argument("tag", help="Tag identifying the line in the file.")
    add_tag_parser.add_argument(
        "--flags", "-f", nargs="*", help="Optional flags for filtering"
    )
    add_tag_parser.add_argument(
        "--wrapper",
        "-w",
        dest="wrapper",
        help="Value will be wrapped in this character (useful for updating values in brackets or commas).",
    )
    add_tag_parser.add_argument(
        "--occurences",
        "-o",
        nargs="*",
        dest="occurences",
        help="Which occurence of the tag should be included, can be an integer, list of integers or the string 'all'",
    )

    add_lc_parser = add_sub_parser.add_parser(
        "lc", help="Add a line/column-type entry to the bump config."
    )
    add_lc_parser.set_defaults(func=add_entry)
    add_lc_parser.add_argument("name", help="The name of the entry in the config.")
    add_lc_parser.add_argument("filepath", help="Path to the file")
    add_lc_parser.add_argument("line", help="The line at which the value is located")
    add_lc_parser.add_argument(
        "column", help="The column after which the value is located"
    )
    add_lc_parser.add_argument(
        "--flags", "-f", nargs="*", help="Optional flags for filtering"
    )
    add_lc_parser.add_argument(
        "--wrapper",
        "-w",
        dest="wrapper",
        help="Value will be wrapped in this character (useful for updating values in brackets or commas).",
    )

    add_regex_parser = add_sub_parser.add_parser(
        "regex",
        help="Match tags with regex instead of plaintext, also supports group matching the values place.",
    )
    add_regex_parser.set_defaults(func=add_entry)
    add_regex_parser.add_argument("name", help="The name of the entry in the config.")
    add_regex_parser.add_argument("filepath", help="Path to the file")
    add_regex_parser.add_argument(
        "regex",
        help="The regular expression, if no group is specified values are updated after any given match (like tags).",
    )
    add_regex_parser.add_argument(
        "--group",
        "-g",
        nargs=1,
        help="The group number which should be interpreted as the value. 0 means the entire match is interpreted as the value. Everything but the value itself is preserved, useful when values aren't at the end of a line",
    )
    add_regex_parser.add_argument(
        "--occurences",
        "-o",
        nargs="*",
        dest="occurences",
        help="Which occurence of any matches should be included, can be an integer or list of integers, by default all occurences are updated.",
    )
    add_regex_parser.add_argument(
        "--flags", "-f", nargs="*", help="Optional flags for filtering"
    )
    add_regex_parser.add_argument(
        "--wrapper",
        "-w",
        dest="wrapper",
        help="Value will be wrapped in this character (useful for updating values in brackets or commas).",
    )

    remove_parser = subparsers.add_parser(
        "remove", help="Remove an entry from bump.cfg"
    )
    remove_parser.set_defaults(func=remove_entry)
    remove_parser.add_argument("name", help="Name of the entry to remove")

    args = parser.parse_args()
    args.func(args)


if __name__ == "__main__":
    main()
